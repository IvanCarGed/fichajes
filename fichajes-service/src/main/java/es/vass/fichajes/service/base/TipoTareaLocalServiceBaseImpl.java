/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.vass.fichajes.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import es.vass.fichajes.model.TipoTarea;
import es.vass.fichajes.service.TipoTareaLocalService;
import es.vass.fichajes.service.persistence.TareaPersistence;
import es.vass.fichajes.service.persistence.TipoTareaPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tipo tarea local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link es.vass.fichajes.service.impl.TipoTareaLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see es.vass.fichajes.service.impl.TipoTareaLocalServiceImpl
 * @see es.vass.fichajes.service.TipoTareaLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TipoTareaLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements TipoTareaLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link es.vass.fichajes.service.TipoTareaLocalServiceUtil} to access the tipo tarea local service.
	 */

	/**
	 * Adds the tipo tarea to the database. Also notifies the appropriate model listeners.
	 *
	 * @param tipoTarea the tipo tarea
	 * @return the tipo tarea that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TipoTarea addTipoTarea(TipoTarea tipoTarea) {
		tipoTarea.setNew(true);

		return tipoTareaPersistence.update(tipoTarea);
	}

	/**
	 * Creates a new tipo tarea with the primary key. Does not add the tipo tarea to the database.
	 *
	 * @param tipoTareaId the primary key for the new tipo tarea
	 * @return the new tipo tarea
	 */
	@Override
	@Transactional(enabled = false)
	public TipoTarea createTipoTarea(long tipoTareaId) {
		return tipoTareaPersistence.create(tipoTareaId);
	}

	/**
	 * Deletes the tipo tarea with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tipoTareaId the primary key of the tipo tarea
	 * @return the tipo tarea that was removed
	 * @throws PortalException if a tipo tarea with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TipoTarea deleteTipoTarea(long tipoTareaId)
		throws PortalException {
		return tipoTareaPersistence.remove(tipoTareaId);
	}

	/**
	 * Deletes the tipo tarea from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tipoTarea the tipo tarea
	 * @return the tipo tarea that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TipoTarea deleteTipoTarea(TipoTarea tipoTarea) {
		return tipoTareaPersistence.remove(tipoTarea);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TipoTarea.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return tipoTareaPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.vass.fichajes.model.impl.TipoTareaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return tipoTareaPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.vass.fichajes.model.impl.TipoTareaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return tipoTareaPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return tipoTareaPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return tipoTareaPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TipoTarea fetchTipoTarea(long tipoTareaId) {
		return tipoTareaPersistence.fetchByPrimaryKey(tipoTareaId);
	}

	/**
	 * Returns the tipo tarea with the primary key.
	 *
	 * @param tipoTareaId the primary key of the tipo tarea
	 * @return the tipo tarea
	 * @throws PortalException if a tipo tarea with the primary key could not be found
	 */
	@Override
	public TipoTarea getTipoTarea(long tipoTareaId) throws PortalException {
		return tipoTareaPersistence.findByPrimaryKey(tipoTareaId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(tipoTareaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TipoTarea.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("tipoTareaId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(tipoTareaLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(TipoTarea.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("tipoTareaId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(tipoTareaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TipoTarea.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("tipoTareaId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return tipoTareaLocalService.deleteTipoTarea((TipoTarea)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return tipoTareaPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the tipo tareas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link es.vass.fichajes.model.impl.TipoTareaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of tipo tareas
	 * @param end the upper bound of the range of tipo tareas (not inclusive)
	 * @return the range of tipo tareas
	 */
	@Override
	public List<TipoTarea> getTipoTareas(int start, int end) {
		return tipoTareaPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of tipo tareas.
	 *
	 * @return the number of tipo tareas
	 */
	@Override
	public int getTipoTareasCount() {
		return tipoTareaPersistence.countAll();
	}

	/**
	 * Updates the tipo tarea in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param tipoTarea the tipo tarea
	 * @return the tipo tarea that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TipoTarea updateTipoTarea(TipoTarea tipoTarea) {
		return tipoTareaPersistence.update(tipoTarea);
	}

	/**
	 * Returns the tarea local service.
	 *
	 * @return the tarea local service
	 */
	public es.vass.fichajes.service.TareaLocalService getTareaLocalService() {
		return tareaLocalService;
	}

	/**
	 * Sets the tarea local service.
	 *
	 * @param tareaLocalService the tarea local service
	 */
	public void setTareaLocalService(
		es.vass.fichajes.service.TareaLocalService tareaLocalService) {
		this.tareaLocalService = tareaLocalService;
	}

	/**
	 * Returns the tarea persistence.
	 *
	 * @return the tarea persistence
	 */
	public TareaPersistence getTareaPersistence() {
		return tareaPersistence;
	}

	/**
	 * Sets the tarea persistence.
	 *
	 * @param tareaPersistence the tarea persistence
	 */
	public void setTareaPersistence(TareaPersistence tareaPersistence) {
		this.tareaPersistence = tareaPersistence;
	}

	/**
	 * Returns the tipo tarea local service.
	 *
	 * @return the tipo tarea local service
	 */
	public TipoTareaLocalService getTipoTareaLocalService() {
		return tipoTareaLocalService;
	}

	/**
	 * Sets the tipo tarea local service.
	 *
	 * @param tipoTareaLocalService the tipo tarea local service
	 */
	public void setTipoTareaLocalService(
		TipoTareaLocalService tipoTareaLocalService) {
		this.tipoTareaLocalService = tipoTareaLocalService;
	}

	/**
	 * Returns the tipo tarea persistence.
	 *
	 * @return the tipo tarea persistence
	 */
	public TipoTareaPersistence getTipoTareaPersistence() {
		return tipoTareaPersistence;
	}

	/**
	 * Sets the tipo tarea persistence.
	 *
	 * @param tipoTareaPersistence the tipo tarea persistence
	 */
	public void setTipoTareaPersistence(
		TipoTareaPersistence tipoTareaPersistence) {
		this.tipoTareaPersistence = tipoTareaPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("es.vass.fichajes.model.TipoTarea",
			tipoTareaLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"es.vass.fichajes.model.TipoTarea");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TipoTareaLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return TipoTarea.class;
	}

	protected String getModelClassName() {
		return TipoTarea.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = tipoTareaPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = es.vass.fichajes.service.TareaLocalService.class)
	protected es.vass.fichajes.service.TareaLocalService tareaLocalService;
	@BeanReference(type = TareaPersistence.class)
	protected TareaPersistence tareaPersistence;
	@BeanReference(type = TipoTareaLocalService.class)
	protected TipoTareaLocalService tipoTareaLocalService;
	@BeanReference(type = TipoTareaPersistence.class)
	protected TipoTareaPersistence tipoTareaPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}